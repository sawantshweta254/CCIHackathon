package com.ccihackathon.comrade.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.ccihackathon.comrade.db.Reminder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table REMINDER.
*/
public class ReminderDao extends AbstractDao<Reminder, Long> {

    public static final String TABLENAME = "REMINDER";

    /**
     * Properties of entity Reminder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id =new Property(0, Long.class , "id", true, "_id");
        public final static Property Guid =new Property(1, String.class , "guid", false, "GUID");
        public final static Property Reminder =new Property(2, String.class , "reminder", false, "REMINDER");
        public final static Property Location =new Property(3, String.class , "location", false, "LOCATION");
        public final static Property Latitude =new Property(4, String.class , "latitude", false, "LATITUDE");
        public final static Property Longitude =new Property(5, String.class , "longitude", false, "LONGITUDE");
        public final static Property Notify =new Property(6, String.class , "notify", false, "NOTIFY");
    };


    public ReminderDao(DaoConfig config) {
        super(config);
    }

    public ReminderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REMINDER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'GUID' TEXT," + // 1: guid
                "'REMINDER' TEXT," + // 2: reminder
                "'LOCATION' TEXT," + // 3: location
                "'LATITUDE' TEXT," + // 4: latitude
                "'LONGITUDE' TEXT," + // 5: longitude
                "'NOTIFY' TEXT);"); // 6: notify
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REMINDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Reminder entity) {
        stmt.clearBindings();
        entity.onBeforeSave();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);

        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);

        }
 
        String reminder = entity.getReminder();
        if (reminder != null) {
            stmt.bindString(3, reminder);

        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);

        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);

        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(6, longitude);

        }
 
        String notify = entity.getNotify();
        if (notify != null) {
            stmt.bindString(7, notify);

        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Reminder readEntity(Cursor cursor, int offset) {
        Reminder entity = new Reminder( //

            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) , // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) , // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) , // reminder
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) , // location
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) , // latitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) , // longitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // notify
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Reminder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0) );
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) );
        entity.setReminder(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) );
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) );
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) );
        entity.setLongitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) );
        entity.setNotify(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) );
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Reminder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Reminder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
